{"version":3,"file":"chakra-ui-theme-explorer.cjs.production.min.js","sources":["../src/layouts/Layout.tsx","../src/components/Link.tsx","../src/providers/ThemeToExploreProvider.tsx","../src/components/ColorModeSwitcher.tsx","../src/components/Logo.tsx","../src/components/ThemeVisualizer/ThemeSidebar.tsx","../src/components/AutoGrid.tsx","../src/components/ThemeVisualizer/TokenItem.tsx","../src/components/ThemeVisualizer/TokenGrid.tsx","../src/components/ThemeVisualizer/configuration.tsx","../src/components/ThemeVisualizer/ColorGrid.tsx","../src/components/ThemeVisualizer/ThemeVisualizer.tsx","../src/layouts/ThemeLayout.tsx","../src/pages/NotFoundPage.tsx","../src/pages/ThemeExplorerRoute.tsx","../src/theme.ts","../src/utils/isBrowser.ts","../src/ThemeExplorer.tsx","../src/hooks/useLocalStorage.ts"],"sourcesContent":["import { BoxProps, Flex } from \"@chakra-ui/react\";\nimport * as React from \"react\";\n\nexport type LayoutProps = {\n  sidebar?: React.ReactNode;\n} & BoxProps;\n\nexport const Layout: React.FC<LayoutProps> = ({\n  sidebar,\n  children,\n  ...boxProps\n}) => {\n  return (\n    <Flex\n      pos=\"relative\"\n      align=\"stretch\"\n      minH=\"100vh\"\n      flex=\"1 0 auto\"\n      {...boxProps}\n    >\n      {sidebar}\n      <Flex flex=\"1\" w=\"auto\" overflow=\"hidden\">\n        {children}\n      </Flex>\n    </Flex>\n  );\n};\n","import * as React from \"react\";\nimport {\n  NavLink as ReactRouterLink,\n  NavLinkProps as ReactRouterLinkProps,\n} from \"react-router-dom\";\nimport {\n  Link as ChakraLink,\n  LinkProps as ChakraLinkProps,\n} from \"@chakra-ui/react\";\n\nexport type LinkProps = ReactRouterLinkProps & ChakraLinkProps;\nexport const Link: React.FC<LinkProps> = (props) => {\n  return <ChakraLink as={ReactRouterLink} {...props} />;\n};\n","import * as React from \"react\";\nimport { ChakraTheme, theme } from \"@chakra-ui/react\";\n\nconst themeToExploreContext = React.createContext<ChakraTheme>(theme);\n\nexport type ExplorerThemeProviderProps = {\n  theme: ChakraTheme;\n};\n\nexport const ThemeToExploreProvider: React.FC<ExplorerThemeProviderProps> = ({\n  theme,\n  children,\n}) => (\n  <themeToExploreContext.Provider value={theme}>\n    {children}\n  </themeToExploreContext.Provider>\n);\n\nexport function useThemeToExplore() {\n  return React.useContext(themeToExploreContext);\n}\n","import * as React from \"react\";\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">;\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue(\"dark\", \"light\");\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  );\n};\n","import { chakra } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { PropsOf } from \"@emotion/react\";\n\nexport type LogoProps = PropsOf<typeof chakra.svg>;\nexport const Logo = (props: LogoProps) => {\n  return (\n    <chakra.svg\n      viewBox=\"0 0 257 257\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"css-2dk2qc\"\n      boxSize=\"2.5rem\"\n      {...props}\n    >\n      <rect width=\"257\" height=\"257\" rx=\"128.5\" fill=\"url(#logo)\" />\n      <path\n        d=\"M69.558 133.985l87.592-86.9891c1.636-1.6251 4.27.3525 3.165 2.377l-32.601 59.7521c-.728 1.332.237 2.958 1.755 2.958h56.34c1.815 0 2.691 2.223 1.364 3.462l-98.7278 92.142c-1.7702 1.652-4.4051-.676-2.9839-2.636l46.7357-64.473c.958-1.322.014-3.174-1.619-3.174H70.9673c-1.7851 0-2.6759-2.161-1.4093-3.419z\"\n        fill=\"#fff\"\n      />\n      <defs>\n        <linearGradient\n          id=\"logo\"\n          x1=\"128.5\"\n          x2=\"128.5\"\n          y2=\"257\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#7BCBD4\" />\n          <stop offset=\"1\" stopColor=\"#29C6B7\" />\n        </linearGradient>\n      </defs>\n    </chakra.svg>\n  );\n};\n","import * as React from \"react\";\nimport {\n  Box,\n  BoxProps,\n  chakra,\n  HStack,\n  Text,\n  List,\n  ListItem,\n  VStack,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport pick from \"lodash/pick\";\nimport startCase from \"lodash/startCase\";\nimport { Link } from \"../Link\";\nimport { useThemeToExplore } from \"../../providers/ThemeToExploreProvider\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\nimport { isObject } from \"@chakra-ui/utils\";\nimport { Logo } from \"../Logo\";\n\nexport type ThemeSidebarProps = BoxProps;\n\nexport const ThemeSidebar: React.FC<ThemeSidebarProps> = (props) => {\n  const theme = useThemeToExplore();\n  const bg = useColorModeValue(\"gray.50\", \"gray.700\");\n  const headingColor = useColorModeValue(\"gray.600\", \"gray.400\");\n  const linkColor = useColorModeValue(\"gray.600\", \"gray.200\");\n  const linkHoverBg = useColorModeValue(\"gray.50\", \"gray.700\");\n  const linkCurrentBg = useColorModeValue(\"gray.200\", \"gray.600\");\n\n  const sections = {\n    Typography: pick(theme, [\n      \"fonts\",\n      \"fontSizes\",\n      \"fontWeights\",\n      \"letterSpacings\",\n      \"lineHeights\",\n    ]),\n    Foundations: pick(theme, [\n      \"borders\",\n      \"breakpoints\",\n      \"colors\",\n      \"radii\",\n      \"shadows\",\n      \"sizes\",\n      \"space\",\n      \"transition\",\n      \"zIndices\",\n    ]),\n    Shared: pick(theme, [\"layerStyles\", \"textStyles\"]),\n    Other: pick(theme, [\"config\", \"direction\"]),\n  };\n\n  const content = Object.entries(sections).map(\n    ([sectionName, themePartial]) => {\n      const items = Object.entries(themePartial)\n        .map(([key, value]) => {\n          if (isObject(value) && !Object.keys(value).length) {\n            return null;\n          }\n\n          return (\n            <ListItem key={key}>\n              <Link\n                d=\"block\"\n                textStyle=\"sidebar-link\"\n                py=\"1\"\n                px=\"2\"\n                borderRadius=\"md\"\n                color={linkColor}\n                _hover={{ bg: linkHoverBg }}\n                sx={{\n                  \"&.active\": {\n                    bg: linkCurrentBg,\n                    fontWeight: \"bold\",\n                  },\n                }}\n                to={`/theme/${key}`}\n              >\n                {startCase(key)}\n              </Link>\n            </ListItem>\n          );\n        })\n        .filter(Boolean);\n\n      if (!items.length) {\n        return null;\n      }\n\n      return (\n        <React.Fragment key={sectionName}>\n          <chakra.h4 textStyle=\"sidebar-title\" color={headingColor}>\n            {sectionName}\n          </chakra.h4>\n          <VStack as={List} align=\"stretch\" spacing=\"1\">\n            {items}\n          </VStack>\n        </React.Fragment>\n      );\n    }\n  );\n\n  return (\n    <Box\n      align=\"flex-start\"\n      flex=\"0 0 auto\"\n      maxH=\"100vh\"\n      pos=\"sticky\"\n      top=\"0\"\n      overflowY=\"auto\"\n      as=\"nav\"\n      minW=\"60\"\n      alignSelf=\"stretch\"\n      bg={bg}\n      {...props}\n    >\n      <HStack justify=\"flex-start\" px=\"2\" py=\"4\">\n        <Logo boxSize=\"8\" />\n        <Text fontWeight=\"bold\" mr=\"auto\">\n          Theme Explorer\n        </Text>\n        <ColorModeSwitcher size=\"sm\" fontSize=\"sm\" />\n      </HStack>\n      <Box p=\"4\" pt=\"2\">\n        {content}\n      </Box>\n    </Box>\n  );\n};\n","import * as React from \"react\";\nimport { Grid, GridProps, useToken } from \"@chakra-ui/react\";\n\nexport type AutoGridProps = GridProps & {\n  minColWidth?: string;\n};\n\nexport const AutoGrid = ({\n  minColWidth = \"xs\",\n  ...gridProps\n}: AutoGridProps) => {\n  const [width] = useToken(\"sizes\", [minColWidth]);\n  return (\n    <Grid\n      gap=\"8\"\n      gridTemplateColumns={`repeat(auto-fill, minmax(${width}, 1fr))`}\n      {...gridProps}\n    />\n  );\n};\n","import {\n  Box,\n  ChakraTheme,\n  Code,\n  Heading,\n  HStack,\n  ListItem,\n  Tooltip,\n  useClipboard,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\n\nexport type TokenItemProps = {\n  token: string;\n  value: string;\n  theme: ChakraTheme;\n  tokenVisualizer?: (\n    row: Pick<TokenItemProps, \"token\" | \"value\" | \"theme\">\n  ) => React.ReactNode;\n};\n\nexport const TokenItem = ({\n  token,\n  value,\n  theme,\n  tokenVisualizer,\n}: TokenItemProps) => {\n  const bg = useColorModeValue(\"gray.200\", \"gray.700\");\n  const visualizerBg = useColorModeValue(\"white\", \"gray.800\");\n  const { hasCopied, onCopy, value: copiedValue } = useClipboard(token);\n  const copiedLabel = `Copied \"${copiedValue}\"`;\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      onCopy();\n    }\n  };\n\n  const tokenVisualization = tokenVisualizer?.({ token, value, theme });\n  const visualization = tokenVisualization ? (\n    <Box bg={visualizerBg} px=\"6\" py=\"6\" flex=\"1\">\n      {tokenVisualization}\n    </Box>\n  ) : null;\n\n  return (\n    <ListItem\n      bg={bg}\n      transition=\"box-shadow 250ms ease-out\"\n      _hover={{ shadow: \"lg\" }}\n      borderRadius=\"md\"\n      shadow=\"md\"\n      overflow=\"hidden\"\n      d=\"flex\"\n      flexDir=\"column\"\n      role=\"button\"\n      onKeyDown={handleKeyDown}\n      onClick={onCopy}\n      tabIndex={0}\n      _focus={{\n        outline: 0,\n        shadow: \"outline\",\n      }}\n    >\n      {visualization}\n      <HStack\n        spacing=\"2\"\n        p=\"6\"\n        py=\"4\"\n        overflowX=\"auto\"\n        align=\"baseline\"\n        flex=\"0 0 auto\"\n      >\n        <Tooltip\n          label={copiedLabel}\n          isOpen={hasCopied}\n          placement=\"bottom-start\"\n        >\n          <Heading size=\"md\" flexBasis=\"8ch\">\n            {token}\n          </Heading>\n        </Tooltip>\n        <Code as=\"pre\" whiteSpace=\"pre-wrap\">\n          {value}\n        </Code>\n      </HStack>\n    </ListItem>\n  );\n};\n","import * as React from \"react\";\nimport { Box, ChakraTheme, List } from \"@chakra-ui/react\";\nimport { AutoGrid } from \"../AutoGrid\";\nimport { TokenItem, TokenItemProps } from \"./TokenItem\";\n\nexport type TokenGridProps = {\n  minColWidth?: string;\n  tokenVisualizer?: TokenItemProps[\"tokenVisualizer\"];\n  tokens: [string, string][];\n  theme: ChakraTheme;\n  description?: React.ReactNode;\n};\n\nexport const TokenGrid: React.FC<TokenGridProps> = ({\n  tokens,\n  theme,\n  tokenVisualizer,\n  minColWidth = \"md\",\n  description,\n}) => {\n  if (!tokens.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {description ? (\n        <Box as=\"aside\" p=\"8\" pb=\"2\">\n          {description}\n        </Box>\n      ) : null}\n      <AutoGrid\n        as={List}\n        px=\"2\"\n        pb=\"2\"\n        gap={[\"2\", \"8\", \"10\"]}\n        minColWidth={minColWidth}\n        mt={[\"4\", \"8\"]}\n      >\n        {tokens.map(([token, value]) => (\n          <TokenItem\n            key={token}\n            token={token}\n            value={value}\n            theme={theme}\n            tokenVisualizer={tokenVisualizer}\n          />\n        ))}\n      </AutoGrid>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { Box, Center, ChakraTheme, Code, Flex, Text } from \"@chakra-ui/react\";\nimport { TokenGridProps } from \"./TokenGrid\";\nimport { get, isObject } from \"@chakra-ui/utils\";\nimport { ColorGrid } from \"./ColorGrid\";\n\nexport function createTokens(value: unknown, maxDepth = 4): [string, string][] {\n  if (!isObject(value) && !Array.isArray(value)) {\n    return [[\"—\", String(value)]];\n  }\n\n  const propertyPaths = extractPropertyPaths(value, maxDepth);\n  return propertyPaths.map((path) => [path, String(get(value, path))]);\n}\n\nfunction extractPropertyPaths(target: unknown, maxDepth = 1) {\n  if ((!isObject(target) && !Array.isArray(target)) || !maxDepth) {\n    return [];\n  }\n\n  return Object.entries(target).reduce((allPropertyPaths, [key, value]) => {\n    if (isObject(value)) {\n      extractPropertyPaths(value, maxDepth - 1).forEach((childKey) =>\n        // e.g. gray.500\n        allPropertyPaths.push(`${key}.${childKey}`)\n      );\n    } else {\n      // e.g. transparent\n      allPropertyPaths.push(key);\n    }\n\n    return allPropertyPaths;\n  }, [] as string[]);\n}\n\nexport type TokenListConfig = Pick<\n  TokenGridProps,\n  \"tokenVisualizer\" | \"description\" | \"minColWidth\"\n> & {\n  TokenListComponent?: React.FC<TokenGridProps>;\n};\n\n/**\n * Add a visualization column to the TokenTable\n */\nexport const tokenListConfig: Partial<\n  Record<keyof ChakraTheme, TokenListConfig>\n> = {\n  fonts: {\n    tokenVisualizer: (row) => (\n      <Box fontFamily={row.value}>\n        Almost before we knew it, we had left the ground.\n      </Box>\n    ),\n    description: (\n      <>\n        Fonts can be applied with the prop <Code>fontFamily</Code> to every\n        chakra component. E.g. <Code>{`<Text fontFamily=\"heading\" />`}</Code>\n      </>\n    ),\n  },\n\n  fontSizes: {\n    minColWidth: \"full\",\n    tokenVisualizer: (row) => (\n      <Box overflow=\"hidden\" maxW=\"calc(100vw - 30rem)\">\n        <Text fontSize={row.value} lineHeight={row.value} isTruncated>\n          Almost before we knew it, we had left the ground.\n        </Text>\n      </Box>\n    ),\n    description: (\n      <>\n        Font Sizes can be applied with the prop <Code>fontSize</Code> to every\n        chakra component. E.g. <Code>{`<Text fontSize=\"lg\" />`}</Code>\n      </>\n    ),\n  },\n\n  fontWeights: {\n    tokenVisualizer: (row) => (\n      <Box overflow=\"hidden\" maxW=\"calc(100vw - 30rem)\">\n        <Text fontWeight={row.value} isTruncated>\n          Almost before we knew it, we had left the ground.\n        </Text>\n      </Box>\n    ),\n    description: (\n      <>\n        Font Weights can be applied with the prop <Code>fontWeight</Code> to\n        every chakra component. E.g. <Code>{`<Text fontWeight=\"bold\" />`}</Code>\n      </>\n    ),\n  },\n\n  letterSpacings: {\n    tokenVisualizer: (row) => (\n      <Box overflow=\"hidden\" maxW=\"calc(100vw - 30rem)\">\n        <Text letterSpacing={row.value} isTruncated>\n          Almost before we knew it, we had left the ground.\n        </Text>\n      </Box>\n    ),\n    description: (\n      <>\n        Letter Spacings can be applied with the prop <Code>letterSpacing</Code>{\" \"}\n        to every chakra component. E.g.{\" \"}\n        <Code>{`<Text letterSpacing=\"wider\" />`}</Code>\n      </>\n    ),\n  },\n\n  lineHeights: {\n    tokenVisualizer: (row) => (\n      <Box overflow=\"hidden\">\n        <Text lineHeight={row.value} maxW=\"sm\">\n          Almost before we knew it, we had left the ground. Almost before we\n          knew it, we had left the ground. Almost before we knew it, we had left\n          the ground. Almost before we knew it, we had left the ground.\n        </Text>\n      </Box>\n    ),\n    description: (\n      <>\n        Line Heights can be applied with the prop <Code>lineHeight</Code> to\n        every chakra component. E.g.{\" \"}\n        <Code>{`<Text lineHeight=\"short\" />`}</Code>\n      </>\n    ),\n  },\n\n  borders: {\n    tokenVisualizer: (row) => <Box h=\"16\" w=\"full\" border={row.value} />,\n  },\n\n  breakpoints: {\n    minColWidth: \"full\",\n    tokenVisualizer: (row) => (\n      <Box fontSize=\"1rem\" width={row.value} h=\"3\" background=\"blue.200\" />\n    ),\n  },\n\n  colors: {\n    TokenListComponent: ColorGrid,\n    minColWidth: \"2xs\",\n    tokenVisualizer: (row) => (\n      <Box\n        background={row.value}\n        h=\"8\"\n        w=\"full\"\n        borderRadius=\"md\"\n        boxShadow=\"sm\"\n      />\n    ),\n  },\n\n  radii: {\n    tokenVisualizer: (row) => (\n      <Box border=\"2px\" borderRadius={row.value} h=\"16\" w=\"full\" />\n    ),\n  },\n\n  sizes: {\n    minColWidth: \"lg\",\n    tokenVisualizer: (row) => (\n      <Box width={row.value} h=\"3\" background=\"blue.200\" />\n    ),\n  },\n\n  space: {\n    minColWidth: \"lg\",\n    tokenVisualizer: (row) => (\n      <Flex>\n        <Box mr={row.value} boxSize=\"3\" background=\"blue.200\" />\n        <Box boxSize=\"3\" background=\"blue.200\" />\n      </Flex>\n    ),\n  },\n\n  shadows: {\n    tokenVisualizer: (row) => <Box shadow={row.value} h=\"16\" w=\"full\" />,\n  },\n\n  transition: {\n    tokenVisualizer: (row) => {\n      if (row.token.startsWith(\"property\")) {\n        return null;\n      }\n\n      const commonProps = {\n        h: \"16\",\n        w: \"full\",\n        bg: \"blue.100\",\n        fontSize: \"xs\",\n        color: \"gray.900\",\n        _hover: { bg: \"blue.900\", color: \"gray.50\" },\n      };\n\n      if (row.token.startsWith(\"easing\")) {\n        return (\n          <Center\n            {...commonProps}\n            transitionTimingFunction={row.value}\n            transitionDuration=\"ultra-slow\"\n          >\n            hover me\n          </Center>\n        );\n      }\n\n      if (row.token.startsWith(\"duration\")) {\n        return (\n          <Center {...commonProps} transitionDuration={row.value}>\n            hover me\n          </Center>\n        );\n      }\n\n      return null;\n    },\n  },\n\n  textStyles: {\n    tokenVisualizer: (row) => {\n      const sx = get(row.theme, `textStyles.${row.token}`);\n      return (\n        <Text sx={sx}>Almost before we knew it, we had left the ground.</Text>\n      );\n    },\n  },\n  layerStyles: {\n    tokenVisualizer: (row) => {\n      const sx = get(row.theme, `layerStyles.${row.token}`);\n      return <Box boxSize=\"16\" sx={sx} />;\n    },\n  },\n};\n\nexport const createCustomTokensMap: Partial<\n  Record<\n    keyof ChakraTheme,\n    (themeValue: any) => ReturnType<typeof createTokens>\n  >\n> = {\n  textStyles: (themeValue: ChakraTheme[\"textStyles\"]) =>\n    themeValue\n      ? Object.entries(themeValue).map(([key, value]) => [\n          key,\n          JSON.stringify(value, null, 2),\n        ])\n      : [],\n\n  layerStyles: (themeValue: ChakraTheme[\"layerStyles\"]) =>\n    themeValue\n      ? Object.entries(themeValue).map(([key, value]) => [\n          key,\n          JSON.stringify(value, null, 2),\n        ])\n      : [],\n\n  styles: (themeValue: ChakraTheme[\"styles\"]) =>\n    themeValue\n      ? Object.entries(themeValue).map(([key, value]) => [\n          key,\n          JSON.stringify(value, null, 2),\n        ])\n      : [],\n};\n","import * as React from \"react\";\nimport { Box, List, VStack } from \"@chakra-ui/react\";\nimport { AutoGrid } from \"../AutoGrid\";\nimport { TokenGridProps } from \"./TokenGrid\";\nimport { TokenItem } from \"./TokenItem\";\n\nexport const ColorGrid: React.FC<TokenGridProps> = ({\n  tokens,\n  theme,\n  tokenVisualizer,\n  minColWidth = \"md\",\n  description,\n}) => {\n  if (!tokens.length) {\n    return null;\n  }\n\n  const colorSchemes = tokens.reduce(\n    (allColorSchemes, [token, value], index, all) => {\n      const prev = all[index - 1];\n      const [firstTokenPart] = token.split(\".\");\n\n      if (prev?.[0].startsWith(firstTokenPart)) {\n        allColorSchemes[allColorSchemes.length - 1].push([token, value]);\n      } else {\n        allColorSchemes.push([[token, value]]);\n      }\n\n      return allColorSchemes;\n    },\n    [] as [string, string][][]\n  );\n\n  return (\n    <>\n      {description ? (\n        <Box as=\"aside\" p=\"8\">\n          {description}\n        </Box>\n      ) : null}\n      <VStack align=\"stretch\" spacing={[\"8\", \"16\"]} mt={[\"4\", \"8\"]}>\n        {colorSchemes.map((colorScheme, index) => (\n          <AutoGrid\n            as={List}\n            key={index}\n            px=\"2\"\n            pb={[\"2\", \"4\"]}\n            gap={[\"4\", \"8\"]}\n            minColWidth={minColWidth}\n          >\n            {colorScheme.map(([token, value]) => (\n              <TokenItem\n                key={token}\n                token={token}\n                value={value}\n                theme={theme}\n                tokenVisualizer={tokenVisualizer}\n              />\n            ))}\n          </AutoGrid>\n        ))}\n      </VStack>\n    </>\n  );\n};\n","import { Box, ChakraTheme, Heading, VStack } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport startCase from \"lodash/startCase\";\nimport { TokenGrid } from \"./TokenGrid\";\nimport { useThemeToExplore } from \"../../providers/ThemeToExploreProvider\";\nimport {\n  createTokens,\n  tokenListConfig,\n  createCustomTokensMap,\n} from \"./configuration\";\n\nexport type ThemeVisualizerProps = {\n  section: keyof ChakraTheme;\n};\n\nexport const ThemeVisualizer: React.FC<ThemeVisualizerProps> = ({\n  section,\n}) => {\n  const theme = useThemeToExplore();\n  const themeValue = theme[section];\n\n  const title = startCase(section);\n  const {\n    tokenVisualizer,\n    minColWidth,\n    description,\n    TokenListComponent = TokenGrid,\n  } = tokenListConfig[section] ?? {\n    tokenVisualizer: undefined,\n    minColWidth: undefined,\n  };\n\n  const tokenCreator = createCustomTokensMap[section] ?? createTokens;\n  const tokens = tokenCreator(themeValue);\n\n  return (\n    <VStack w=\"full\" align=\"stretch\">\n      <Box as=\"header\" pt=\"10\" px=\"8\">\n        <Heading size=\"lg\" fontWeight=\"300\">\n          {title}\n        </Heading>\n      </Box>\n      <Box as=\"section\">\n        <TokenListComponent\n          theme={theme}\n          tokens={tokens}\n          tokenVisualizer={tokenVisualizer}\n          minColWidth={minColWidth}\n          description={description}\n        />\n      </Box>\n    </VStack>\n  );\n};\n","import * as React from \"react\";\nimport { Layout } from \"./Layout\";\nimport { ThemeSidebar } from \"../components/ThemeVisualizer\";\nimport { Box, useColorModeValue } from \"@chakra-ui/react\";\n\nexport type ThemeLayoutProps = {};\nexport const ThemeLayout: React.FC<ThemeLayoutProps> = ({ children }) => {\n  const bg = useColorModeValue(\"gray.50\", \"gray.700\");\n  const contentBg = useColorModeValue(\"gray.100\", \"gray.900\");\n\n  return (\n    <Layout sidebar={<ThemeSidebar />} bg={bg}>\n      <Box\n        as=\"main\"\n        borderRadius=\"md\"\n        bg={contentBg}\n        m=\"2\"\n        flex=\"1\"\n        p=\"2\"\n        overflow=\"hidden\"\n      >\n        {children}\n      </Box>\n    </Layout>\n  );\n};\n","import * as React from \"react\";\nimport { Center, Heading, Button, VStack } from \"@chakra-ui/react\";\nimport { Layout } from \"../layouts\";\nimport { Link } from \"../components/Link\";\n\nexport type NotFoundPageProps = {};\nexport const NotFoundPage: React.FC<NotFoundPageProps> = () => (\n  <Layout>\n    <Center w=\"full\">\n      <VStack spacing=\"8\">\n        <Heading size=\"md\">Page not found</Heading>\n        <Button as={Link} to=\"/\">\n          Go back\n        </Button>\n      </VStack>\n    </Center>\n  </Layout>\n);\n","import * as React from \"react\";\nimport { useRouteMatch } from \"react-router\";\nimport { ChakraTheme } from \"@chakra-ui/react\";\nimport { ThemeVisualizer } from \"../components/ThemeVisualizer\";\nimport { ThemeLayout } from \"../layouts\";\n\nexport type ThemeExplorerRouteProps = {};\n\nexport const ThemeExplorerRoute: React.FC<ThemeExplorerRouteProps> = () => {\n  const match = useRouteMatch<{ section: keyof ChakraTheme }>();\n  const { section } = match.params;\n\n  return (\n    <ThemeLayout>\n      <ThemeVisualizer section={section} />\n    </ThemeLayout>\n  );\n};\n","import { extendTheme } from \"@chakra-ui/react\";\n\nexport const theme = extendTheme({\n  config: {\n    useSystemColorMode: false,\n  },\n  components: {\n    Code: {\n      defaultProps: {\n        variant: \"none\",\n      },\n    },\n    Table: {\n      baseStyle: {\n        caption: {\n          textAlign: \"left\",\n          mt: \"0\",\n        },\n      },\n    },\n  },\n  textStyles: {\n    \"sidebar-title\": {\n      fontSize: \"xs\",\n      fontWeight: \"bold\",\n      my: \"4\",\n      textTransform: \"uppercase\",\n      letterSpacing: \"wider\",\n      \"&:first-of-type\": {\n        mt: \"0\",\n      },\n    },\n    \"sidebar-link\": {\n      fontSize: \"sm\",\n    },\n  },\n});\n","export const isBrowser = typeof globalThis.window !== \"undefined\";\n","import * as React from \"react\";\nimport {\n  HashRouter,\n  MemoryRouter,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport { NotFoundPage } from \"./pages/NotFoundPage\";\nimport {\n  IconButton,\n  ButtonProps,\n  ThemeProvider,\n  ChakraProvider,\n  ChakraTheme,\n  useDisclosure,\n  Tooltip,\n  ChakraProviderProps,\n  HStack,\n} from \"@chakra-ui/react\";\nimport NewWindow from \"react-new-window\";\nimport { CacheProvider } from \"@emotion/react\";\nimport createCache from \"@emotion/cache\";\nimport { ThemeExplorerRoute } from \"./pages/ThemeExplorerRoute\";\nimport { ThemeToExploreProvider } from \"./providers/ThemeToExploreProvider\";\nimport { theme as explorerTheme } from \"./theme\";\nimport { useLocalStorage } from \"./hooks/useLocalStorage\";\nimport { isBrowser } from \"./utils/isBrowser\";\nimport { Logo } from \"./components/Logo\";\n\nconst localStoragePrefix = \"chakra-theme-explorer:\";\nconst colorModeKey = `${localStoragePrefix}color-mode`;\n\nconst colorModeManager: ChakraProviderProps[\"colorModeManager\"] = {\n  type: \"localStorage\",\n  get: () => {\n    if (!isBrowser) {\n      return undefined;\n    }\n\n    const raw = isBrowser\n      ? globalThis.localStorage.getItem(colorModeKey)\n      : undefined;\n    if ([\"light\", \"dark\"].includes(String(raw))) {\n      return raw as \"light\" | \"dark\";\n    }\n\n    return undefined;\n  },\n  set: (value) =>\n    isBrowser\n      ? globalThis.localStorage.setItem(colorModeKey, value)\n      : undefined,\n};\n\nexport interface ThemeExplorerProps {\n  theme: ChakraTheme;\n  buttonProps?: ButtonProps;\n}\n\nexport const ThemeExplorer: React.FC<ThemeExplorerProps> = ({\n  theme,\n  buttonProps,\n}) => {\n  const [defaultIsOpen, setDefaultIsOpen] = useLocalStorage(\n    `${localStoragePrefix}OPEN`,\n    false\n  );\n  const { isOpen, onClose, onToggle } = useDisclosure({\n    defaultIsOpen,\n    onOpen: () => setDefaultIsOpen(true),\n    onClose: () => setDefaultIsOpen(false),\n  });\n  const windowRef = React.useRef<NewWindow | null>();\n\n  React.useEffect(() => {\n    const handleUnload = () => {\n      windowRef.current?.release();\n      setDefaultIsOpen(isOpen);\n    };\n    globalThis.addEventListener(\"unload\", handleUnload);\n    return () => {\n      globalThis.removeEventListener(\"unload\", handleUnload);\n    };\n  }, [isOpen, setDefaultIsOpen]);\n\n  React.useEffect(() => () => windowRef.current?.release(), []);\n\n  const label = (isOpen ? \"Close\" : \"Open\") + \" Chakra UI Theme Explorer\";\n\n  return (\n    <ThemeProvider theme={explorerTheme}>\n      <HStack\n        spacing=\"4\"\n        as=\"aside\"\n        position=\"fixed\"\n        bottom=\"0\"\n        right=\"0\"\n        m=\"4\"\n      >\n        <Tooltip label={label}>\n          <IconButton\n            onClick={onToggle}\n            aria-label={label}\n            colorScheme=\"teal\"\n            isRound\n            icon={<Logo />}\n            shadow=\"lg\"\n            willChange=\"transform\"\n            _hover={{\n              shadow: \"xl\",\n              transform: \"translateY(-3px)\",\n            }}\n            {...buttonProps}\n          />\n        </Tooltip>\n      </HStack>\n      {isOpen ? (\n        // @ts-ignore\n        <NewWindow\n          title=\"Chakra UI Theme Explorer\"\n          onUnload={onClose}\n          copyStyles={false}\n          features={\n            {\n              location: false,\n              toolbar: false,\n              status: false,\n              menubar: false,\n              scrollbars: true,\n              resizable: true,\n            } as any\n          }\n          ref={(ref) => {\n            windowRef.current = ref;\n          }}\n        >\n          <Nested theme={theme} windowRef={windowRef} />\n        </NewWindow>\n      ) : null}\n    </ThemeProvider>\n  );\n};\n\ninterface NestedProps {\n  theme: ChakraTheme;\n  windowRef: any;\n}\n\nexport const Nested = ({ theme, windowRef }: NestedProps) => (\n  <CacheProvider\n    value={createCache({\n      key: \"theme-explorer-window\",\n      container: (windowRef.current as any)?.container,\n    })}\n  >\n    <StandaloneThemeExplorer theme={theme} />\n  </CacheProvider>\n);\n\nexport interface StandaloneThemeExplorerProps {\n  theme: ChakraTheme;\n  router?: \"memory\" | \"hash\";\n}\n\nexport const StandaloneThemeExplorer = ({\n  theme,\n  router = \"memory\",\n}: StandaloneThemeExplorerProps) => {\n  const Router: any = router === \"hash\" ? HashRouter : MemoryRouter;\n\n  return (\n    <ChakraProvider theme={explorerTheme} colorModeManager={colorModeManager}>\n      <ThemeToExploreProvider theme={theme}>\n        <Router>\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              render={() => <Redirect to=\"/theme/fonts\" />}\n            />\n            <Route\n              path=\"/theme/:section\"\n              exact\n              component={ThemeExplorerRoute}\n            />\n            <Route path=\"*\" component={NotFoundPage} />\n          </Switch>\n        </Router>\n      </ThemeToExploreProvider>\n    </ChakraProvider>\n  );\n};\n","import * as React from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const item = globalThis.localStorage?.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      globalThis.localStorage?.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n"],"names":["Layout","sidebar","children","boxProps","React","Flex","pos","align","minH","flex","w","overflow","Link","props","ChakraLink","as","ReactRouterLink","themeToExploreContext","theme","ThemeToExploreProvider","Provider","value","useThemeToExplore","ColorModeSwitcher","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","IconButton","size","fontSize","variant","color","marginLeft","onClick","icon","Logo","chakra","svg","viewBox","xmlns","className","boxSize","width","height","rx","fill","d","id","x1","x2","y2","gradientUnits","stopColor","offset","ThemeSidebar","bg","headingColor","linkColor","linkHoverBg","linkCurrentBg","sections","Typography","pick","Foundations","Shared","Other","content","Object","entries","map","sectionName","items","key","isObject","keys","length","ListItem","textStyle","py","px","borderRadius","_hover","sx","fontWeight","to","startCase","filter","Boolean","h4","VStack","List","spacing","Box","maxH","top","overflowY","minW","alignSelf","HStack","justify","Text","mr","p","pt","AutoGrid","minColWidth","gridProps","useToken","Grid","gap","gridTemplateColumns","TokenItem","token","tokenVisualizer","visualizerBg","useClipboard","hasCopied","onCopy","copiedLabel","tokenVisualization","visualization","transition","shadow","flexDir","role","onKeyDown","e","tabIndex","_focus","outline","overflowX","Tooltip","label","isOpen","placement","Heading","flexBasis","Code","whiteSpace","TokenGrid","tokens","description","pb","mt","createTokens","maxDepth","Array","isArray","extractPropertyPaths","target","reduce","allPropertyPaths","forEach","childKey","push","path","String","get","tokenListConfig","fonts","row","fontFamily","fontSizes","maxW","lineHeight","isTruncated","fontWeights","letterSpacings","letterSpacing","lineHeights","borders","h","border","breakpoints","background","colors","TokenListComponent","colorSchemes","allColorSchemes","index","all","prev","split","startsWith","colorScheme","boxShadow","radii","sizes","space","shadows","commonProps","Center","transitionTimingFunction","transitionDuration","textStyles","layerStyles","createCustomTokensMap","themeValue","JSON","stringify","styles","ThemeVisualizer","section","title","undefined","ThemeLayout","contentBg","m","NotFoundPage","Button","ThemeExplorerRoute","match","useRouteMatch","params","extendTheme","config","useSystemColorMode","components","defaultProps","Table","baseStyle","caption","textAlign","my","textTransform","isBrowser","globalThis","window","colorModeManager","type","raw","localStorage","getItem","localStoragePrefix","includes","set","setItem","Nested","CacheProvider","createCache","container","windowRef","current","_windowRef$current3","StandaloneThemeExplorer","router","ChakraProvider","explorerTheme","HashRouter","MemoryRouter","Switch","Route","exact","render","Redirect","component","storedValue","setStoredValue","buttonProps","item","_globalThis$localStor","parse","error","console","valueToStore","Function","setDefaultIsOpen","useDisclosure","defaultIsOpen","onOpen","onClose","onToggle","handleUnload","release","addEventListener","removeEventListener","_windowRef$current2","ThemeProvider","position","bottom","right","isRound","willChange","transform","NewWindow","onUnload","copyStyles","features","location","toolbar","status","menubar","scrollbars","resizable","ref"],"mappings":"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"}